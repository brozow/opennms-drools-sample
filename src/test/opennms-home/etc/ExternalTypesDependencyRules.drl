package com.example.sample.drools;

import function org.opennms.core.utils.InetAddressUtils.addr;
import function org.opennms.core.utils.InetAddressUtils.str;

import java.util.Date;
import java.net.InetAddress;


import org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine;
import org.opennms.netmgt.xml.event.Event;
import org.opennms.netmgt.model.events.EventBuilder;
import org.opennms.netmgt.EventConstants;
import org.opennms.netmgt.capsd.EventUtils;
import org.drools.spi.KnowledgeHelper;

global org.opennms.netmgt.correlation.drools.DroolsCorrelationEngine engine;

declare Initialized
	initialized : boolean
end

rule "init"
	salience 10000 // set this very large so this rule has highest priority
when
	not Initialized()
then
	println( "Initializing ExternalTypes Knowledgedbase!!!" );
	
	// Set up nodes and edges for dependency graph
	
	// node1 services
	insert( new Service( 1, "10.1.1.1", "ICMP" ) );
	
	Service http = new Service( 1, "10.1.1.1", "HTTP" );
	insert( http );
	
	// node2 services
	insert( new Service( 2, "10.1.1.2", "ICMP" ) );
	
	Service dns = new Service( 2, "10.1.1.2", "DNS" ); 
	insert( dns );
	
	// node3 services
	insert( new Service( 3, "10.1.1.3", "ICMP" ) );
	
	Service db = new Service( 3, "10.1.1.3", "DB" ); 
	insert( db );

	// insert the app
	Application eCommerce = new Application( "e-commerce" ); 		
	insert( eCommerce );
	
	// dependencies
	// Note: Service Depends on ICMP is a separate rule
	insert( new DependsOn( eCommerce, http ) );
	insert( new DependsOn( eCommerce, dns  ) );
	insert( new DependsOn( eCommerce, db   ) ); 
	
	Application hrPortal = new Application( "hr-portal" );
	insert( hrPortal );
		
	insert( new DependsOn( hrPortal, http ) );
	insert( new DependsOn( hrPortal, dns ) );
	
	insert( new Initialized() );
		
	sendInitEvent( engine );
end

rule "services depends on icmp"
	salience 10000 // set this very large so this rule has highest priority
when
    // select ... from service as svc1 join service as svc2 on svc1.node = svc2.node and svc1.addr = svc2.addr where svc1.svcName != 'ICMP' and svc2.svcName = 'ICMP'
	$svc : Service( $n : node, $a : addr, svc != "ICMP" )
	$icmp : Service( node == $n, addr == $a, svc == "ICMP" ) 
then
	insert( new DependsOn( $svc, $icmp ) );
end	



rule "service down"
	salience 100
when
	$e : Event( uei matches ".*nodeLostService", $nodeid : nodeid, $addr : interfaceAddress, $svc : service == "ICMP" )
	$s : Service( node == $nodeid, addr == $addr, svc == $svc ) 
//	not ( Impacted( target == $s ) )
then
	println( "Service " + $s + " is down!" );
	insert( new Impacted( $s, $e ) );
end

rule "service up"
	salience 100
when
	$downEvent : Event( uei matches ".*nodeLostService", $nodeid : nodeid, $addr : interfaceAddress, $svc : service == "ICMP" )
	$upEvent : Event( uei matches ".*nodeRegainedService", nodeid ==  $nodeid, interfaceAddress == $addr, service == $svc )
	$s : Service( node == $nodeid, addr == $addr, svc == $svc )
	$impacted : Impacted( target == $s, cause == $downEvent )
then
	retract( $downEvent );
	retract( $upEvent );
	retract( $impacted );
	insert( new Resolved( $downEvent, $upEvent ) );
	println( "Resolved down event " + $downEvent );
end



rule "impacted service"
	salience 400
when
	$a : Service()
	$i : Impacted( $b : target, $e : cause )
	DependsOn( a == $a, b == $b )
then
	println( "Service " + $a + " depends on impacted service " + $b + " with cause " + $e.getUei()  + " with id " + $e.getDbid() );
	insert( new Impacted( $a, $e ) );
	sendImpactedServiceEvent( engine, $a, $e );
end	

rule "resolved service"
	salience 400
when
	$s : Service()
	$i : Impacted( target == $s, $cause : cause )
	$r : Resolved( cause == $cause )
then
	println( " Resolving Impact " + $i );
	retract( $i ); 
	sendResolvedServiceEvent(engine, $s, $cause);
end

rule "impacted app"
	salience 300
when
	$a : Application()
	Impacted( $b : target, $e : cause )
	DependsOn( a == $a, b == $b )
then
	println( "Application " + $a + " depends on impacted service " + $b + " with cause " + $e.getUei()  + " with id " + $e.getDbid() );
	insert( new Impacted( $a, $e ) );
	sendImpactedApplicationEvent( engine, $a, $e );
end	

rule "resolved app"
	salience 400
when
	$a : Application()
	$i : Impacted( target == $a, $cause : cause )
	$r : Resolved( cause == $cause )
then
	println( " Resolving Impact " + $i );
	retract( $i ); 
	sendResolvedApplicationEvent( engine, $a, $cause );
end

rule "clean up resolutions"
when
	$r : Resolved( $c : cause )
	not( Impacted( cause == $c ) )
then
	println( "Cleanup up resolve " + $r );
	retract( $r );
end

function void println(Object msg)
{
	System.err.println(new Date() + " : " + msg);
}

function void sendInitEvent( DroolsCorrelationEngine engine )
{
	EventBuilder bldr = new EventBuilder( "initialized", "Drools" );
	engine.sendEvent(bldr.getEvent());
}

function void sendImpactedServiceEvent( DroolsCorrelationEngine engine, Service svc, Event e )
{
	EventBuilder bldr = new EventBuilder( "serviceImpacted", "Drools" );
	bldr.setNodeid( svc.getNode() );
	bldr.setInterface( svc.getAddr() );
	bldr.setService( svc.getSvc() );
	bldr.addParam("CAUSE", e.getDbid() );
	engine.sendEvent(bldr.getEvent());
}

function void sendResolvedServiceEvent( DroolsCorrelationEngine engine, Service svc, Event e)
{
	EventBuilder bldr = new EventBuilder( "serviceRestored", "Drools" );
	bldr.setNodeid( svc.getNode() );
	bldr.setInterface( svc.getAddr() );
	bldr.setService( svc.getSvc() );
	bldr.addParam("CAUSE", e.getDbid() );
	engine.sendEvent(bldr.getEvent());
}

function void sendImpactedApplicationEvent( DroolsCorrelationEngine engine, Application a, Event e )
{
	EventBuilder bldr = new EventBuilder( "applicationImpacted", "Drools" );
	bldr.addParam("APP", a.getName() );
	bldr.addParam("CAUSE", e.getDbid() );
	engine.sendEvent(bldr.getEvent());
}

function void sendResolvedApplicationEvent( DroolsCorrelationEngine engine, Application a, Event e)
{
	EventBuilder bldr = new EventBuilder( "applicationRestored", "Drools" );
	bldr.addParam( "APP", a.getName() );
	bldr.addParam( "CAUSE", e.getDbid() );
	engine.sendEvent(bldr.getEvent());
}
